{
  "version": 3,
  "sources": ["../../wagmi/dist/connectors/metaMask.js", "../../@wagmi/core/dist/connectors/metaMask.js", "../../@wagmi/connectors/dist/metaMask.js"],
  "sourcesContent": ["// src/connectors/metaMask.ts\r\nimport { MetaMaskConnector } from \"@wagmi/core/connectors/metaMask\";\r\nexport {\r\n  MetaMaskConnector\r\n};\r\n", "import \"../chunk-MQXBDTVK.js\";\r\n\r\n// src/connectors/metaMask.ts\r\nimport { MetaMaskConnector } from \"@wagmi/connectors/metaMask\";\r\nexport {\r\n  MetaMaskConnector\r\n};\r\n", "import {\r\n  InjectedConnector\r\n} from \"./chunk-CYQSS77O.js\";\r\nimport {\r\n  __privateAdd,\r\n  __privateGet,\r\n  __privateSet,\r\n  __publicField\r\n} from \"./chunk-5NCTPR6C.js\";\r\n\r\n// src/metaMask.ts\r\nimport {\r\n  ConnectorNotFoundError,\r\n  ResourceUnavailableError,\r\n  UserRejectedRequestError,\r\n  getClient\r\n} from \"@wagmi/core\";\r\nimport { getAddress } from \"ethers/lib/utils.js\";\r\nvar _UNSTABLE_shimOnConnectSelectAccount;\r\nvar MetaMaskConnector = class extends InjectedConnector {\r\n  constructor({\r\n    chains,\r\n    options: options_\r\n  } = {}) {\r\n    const options = {\r\n      name: \"MetaMask\",\r\n      shimDisconnect: true,\r\n      shimChainChangedDisconnect: true,\r\n      getProvider() {\r\n        function getReady(ethereum2) {\r\n          const isMetaMask = !!ethereum2?.isMetaMask;\r\n          if (!isMetaMask)\r\n            return;\r\n          if (ethereum2.isBraveWallet && !ethereum2._events && !ethereum2._state)\r\n            return;\r\n          if (ethereum2.isApexWallet)\r\n            return;\r\n          if (ethereum2.isAvalanche)\r\n            return;\r\n          if (ethereum2.isKuCoinWallet)\r\n            return;\r\n          if (ethereum2.isPortal)\r\n            return;\r\n          if (ethereum2.isTokenPocket)\r\n            return;\r\n          if (ethereum2.isTokenary)\r\n            return;\r\n          return ethereum2;\r\n        }\r\n        if (typeof window === \"undefined\")\r\n          return;\r\n        const ethereum = window.ethereum;\r\n        if (ethereum?.providers)\r\n          return ethereum.providers.find(getReady);\r\n        return getReady(ethereum);\r\n      },\r\n      ...options_\r\n    };\r\n    super({ chains, options });\r\n    __publicField(this, \"id\", \"metaMask\");\r\n    __publicField(this, \"shimDisconnectKey\", `${this.id}.shimDisconnect`);\r\n    __privateAdd(this, _UNSTABLE_shimOnConnectSelectAccount, void 0);\r\n    __privateSet(this, _UNSTABLE_shimOnConnectSelectAccount, options.UNSTABLE_shimOnConnectSelectAccount);\r\n  }\r\n  async connect({ chainId } = {}) {\r\n    try {\r\n      const provider = await this.getProvider();\r\n      if (!provider)\r\n        throw new ConnectorNotFoundError();\r\n      if (provider.on) {\r\n        provider.on(\"accountsChanged\", this.onAccountsChanged);\r\n        provider.on(\"chainChanged\", this.onChainChanged);\r\n        provider.on(\"disconnect\", this.onDisconnect);\r\n      }\r\n      this.emit(\"message\", { type: \"connecting\" });\r\n      let account = null;\r\n      if (__privateGet(this, _UNSTABLE_shimOnConnectSelectAccount) && this.options?.shimDisconnect && !getClient().storage?.getItem(this.shimDisconnectKey)) {\r\n        account = await this.getAccount().catch(() => null);\r\n        const isConnected = !!account;\r\n        if (isConnected)\r\n          try {\r\n            await provider.request({\r\n              method: \"wallet_requestPermissions\",\r\n              params: [{ eth_accounts: {} }]\r\n            });\r\n            account = await this.getAccount();\r\n          } catch (error) {\r\n            if (this.isUserRejectedRequestError(error))\r\n              throw new UserRejectedRequestError(error);\r\n          }\r\n      }\r\n      if (!account) {\r\n        const accounts = await provider.request({\r\n          method: \"eth_requestAccounts\"\r\n        });\r\n        account = getAddress(accounts[0]);\r\n      }\r\n      let id = await this.getChainId();\r\n      let unsupported = this.isChainUnsupported(id);\r\n      if (chainId && id !== chainId) {\r\n        const chain = await this.switchChain(chainId);\r\n        id = chain.id;\r\n        unsupported = this.isChainUnsupported(id);\r\n      }\r\n      if (this.options?.shimDisconnect)\r\n        getClient().storage?.setItem(this.shimDisconnectKey, true);\r\n      return { account, chain: { id, unsupported }, provider };\r\n    } catch (error) {\r\n      if (this.isUserRejectedRequestError(error))\r\n        throw new UserRejectedRequestError(error);\r\n      if (error.code === -32002)\r\n        throw new ResourceUnavailableError(error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n_UNSTABLE_shimOnConnectSelectAccount = new WeakMap();\r\nexport {\r\n  MetaMaskConnector\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
